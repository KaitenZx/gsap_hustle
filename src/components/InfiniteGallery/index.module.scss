// --- Переменные для настройки ---
$item-height: 18vw;
$column-width: 17vw;
$row-gap: 2vw;
$column-gap: 2vw;

.mwg_effect {
	height: 100vh;
	width: 100vw;
	overflow: hidden;
	position: relative;
	// background-color: #111;
	background-color: var(--background-color);
	box-sizing: border-box;
	perspective: 400vh;
	contain: layout paint;

}

.contentWrapper {
	position: absolute;
	top: 0;
	left: 0;
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
	width: max-content;
	height: auto;
	will-change: transform;
	gap: $column-gap;
	padding: $row-gap 0;
	box-sizing: border-box;
	pointer-events: none;
}

.column {
	width: $column-width;
	display: grid;
	grid-template-columns: 1fr;
	grid-auto-rows: $item-height;
	gap: $row-gap;
	box-sizing: border-box;
	pointer-events: none;
	contain: layout style;
}

.media {
	height: $item-height; // Контейнер задает высоту
	width: 100%; // Контейнер задает ширину
	border-radius: 8px; // Оставляем скругление на контейнере
	user-select: none;
	box-sizing: border-box;
	pointer-events: none; // События отключены на контейнере
	overflow: hidden; // Важно для object-fit: cover/contain, если изображение больше/меньше
	will-change: transform;

	// Стили для вложенного изображения
	img {
		display: block; // Убирает лишний отступ снизу
		width: 100%; // Заполняет контейнер по ширине
		height: 100%; // Заполняет контейнер по высоте
		object-fit: cover; // Масштабирует с сохранением пропорций, обрезая лишнее. Можно заменить на 'contain', если нужно видеть все изображение.
		pointer-events: none; // Убедимся, что и само изображение не ловит события
		// border-radius: inherit; // Можно наследовать скругление, если нужно
	}
}

@media (max-width: 768px) {
	// Новые значения для мобильных
	$mobile-item-height: 45vw;
	$mobile-column-width: 30vw; // Делаем колонки шире, возможно, одна колонка будет видна за раз
	$mobile-row-gap: 4vw;
	$mobile-column-gap: 4vw;

	.contentWrapper {
		gap: $mobile-column-gap;
		padding: $mobile-row-gap 0;
	}

	.column {
		width: $mobile-column-width;
		grid-auto-rows: $mobile-item-height;
		gap: $mobile-row-gap;
	}

	.media {
		height: $mobile-item-height;
	}
}

@media (min-width: 768px) and (max-width: 1023px) {
	// Новые значения для планшетов
	$tablet-item-height: 30vw;
	$tablet-column-width: 25vw;
	$tablet-row-gap: 3vw;
	$tablet-column-gap: 3vw;

	.contentWrapper {
		gap: $tablet-column-gap;
		padding: $tablet-row-gap 0;
	}

	.column {
		width: $tablet-column-width;
		grid-auto-rows: $tablet-item-height;
		gap: $tablet-row-gap;
	}

	.media {
		height: $tablet-item-height;
	}
}

// --- Canvas for background animation ---
.backgroundCanvas {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 0; // Place behind contentWrapper
	pointer-events: none; // Ignore mouse events
	opacity: 0.6; // Make it subtle
	// background-color: #111; // Match container background
	background-color: transparent; // Canvas will draw its own background
	contain: strict;
}

// --- Internal Gallery Footer Styles ---
.internalGalleryFooter {
	position: absolute;
	bottom: 0;
	left: 0;
	width: 100%;
	padding: 20px;
	// background-color: rgba(0, 0, 0, 0.85); // Darker, slightly more opaque background
	// To make this theme-aware without JS for RGBA, we might need separate vars or accept a compromise.
	// For now, let's use a semi-transparent version of the *opposite* of the background for contrast.
	// This is tricky. A simpler SCSS approach:
	background-color: var(--background-color);
	box-shadow: 0 0 20px 20px var(--background-color); // Simulate opaque bg with shadow spread
	// color: #f0f0f0; // Light grey text
	color: var(--text-color);
	text-align: center;
	z-index: 20; // Ensure it's above background canvas and gallery items, but potentially below modal

	// opacity, visibility, and pointerEvents are controlled by GSAP via inline styles initially
	a {
		// color: #aaa; // Style for links in the footer
		color: var(--text-color); // Make links same color as text, perhaps with underline
		opacity: 0.7; // Make them slightly less prominent than main text
		text-decoration: none;
		margin: 0 10px;

		&:hover {
			// color: #fff;
			color: var(--text-color); // Keep same color on hover
			opacity: 1; // Full opacity on hover
			text-decoration: underline;
		}
	}
}